import java.awt.BorderLayout;
import java.awt.KeyEventDispatcher;
import java.awt.KeyboardFocusManager;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.concurrent.CountDownLatch;

import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.JTextPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledDocument;

public class Console implements KeyListener{
	static JFrame frame;
	static StyleContext context;
	static StyledDocument document;
	static Style style;
	static JTextPane input;
  //private static String message = "public class JTextPaneStyle" +
      //"public static void main(String args[]) {" +
      //"JFrame frame = new JFrame();";
  public static void startUp(){
	  frame = new JFrame("TextPane Example");
	    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

	    context = new StyleContext();
	    document = new DefaultStyledDocument(context);

	    style = context.getStyle(StyleContext.DEFAULT_STYLE);
	    StyleConstants.setAlignment(style, StyleConstants.ALIGN_LEFT);
	    StyleConstants.setFontSize(style, 14);
	    StyleConstants.setSpaceAbove(style, 4);
	    StyleConstants.setSpaceBelow(style, 4);
	    JTextPane textPane = new JTextPane(document);
	    textPane.setEditable(false);
	    JScrollPane scrollPane = new JScrollPane(textPane);
	    frame.add(scrollPane, BorderLayout.CENTER);
	    input = new JTextPane(document);
	    frame.add(input, BorderLayout.CENTER);
	    frame.setSize(300, 150);
	    frame.setVisible(true);
  }
  public static void print(String message){
	  //System.out.println(message);
	  try {
	      document.insertString(document.getLength(), "\n" + message, style);
	    } catch (BadLocationException badLocationException) {
	      System.out.println("Oops");
	    }
  }
  public static boolean hasNextString(){
	  String text = input.getText();
	    String[] lines = text.split("\n");
	    String lastLine = lines[lines.length-1];
	  if(lastLine!=""){
		  return true;
	  }
	  return false;
  }
  public static String checkInput(){
	  final CountDownLatch latch = new CountDownLatch(1);
	    KeyEventDispatcher dispatcher = new KeyEventDispatcher() {
	        // Anonymous class invoked from EDT
	        public boolean dispatchKeyEvent(KeyEvent e) {
	            if (e.getKeyCode() == KeyEvent.VK_ENTER)
	                latch.countDown();
	            return false;
	        }
	    };
	    KeyboardFocusManager.getCurrentKeyboardFocusManager().addKeyEventDispatcher(dispatcher);
	    try {
			latch.await();
		} catch (InterruptedException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}  // current thread waits here until countDown() is called
	    KeyboardFocusManager.getCurrentKeyboardFocusManager().removeKeyEventDispatcher(dispatcher);
	    String text = input.getText();
	    String[] lines = text.split("\n");
	    String lastLine = lines[lines.length-1];
	    return lastLine;
  }
@Override
public void keyReleased(KeyEvent e) {
	// TODO Auto-generated method stub
	
}
@Override
public void keyTyped(KeyEvent e) {
	// TODO Auto-generated method stub
	
}
@Override
public void keyPressed(KeyEvent e) {
	// TODO Auto-generated method stub
	if(e.getKeyCode() == KeyEvent.VK_ENTER){
		
	}
}
}
